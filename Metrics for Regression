# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.
!pip install pandas==1.3.4
!pip install scikit-learn==0.20.1
!pip install numpy==1.21.6

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

#Importing Required Libraries
import pandas as pd
from sklearn.linear_model import LinearRegression

#import functions for train test split

from sklearn.model_selection import train_test_split

# import functions for metrics
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from math import sqrt

#Load the data in a csv file into a dataframe
# the data set is available at the url below.
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-BD0231EN-SkillsNetwork/datasets/mpg.csv"

# using the read_csv function in the pandas library, we load the data into a dataframe.

df = pd.read_csv(URL)

# show 5 random rows from the dataset
df.sample(5)

df.shape

#create a scatter plot of Weight versus mileage(MPG) . This will help us visualize the relationship between them.
df.plot.scatter(x = "Weight", y = "MPG")

#Identify the target column and the data columns
y = df["MPG"] # y is the target
X = df[["Horsepower","Weight"]] # X is the set of features

#Split the data set
#split the data set in the ratio of 70:30. 70% training data, 30% testing data.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

#Build and Train a Linear Regression Model
#Create a LR model
lr = LinearRegression()
#Train/Fit the model using the training data set
lr.fit(X_train,y_train)

#Evaluate the model
#The model is now trained. 
#use the testing data to evaluate the model.
lr.score(X_test, y_test)

#To compute the detailed metrics we need two values, the original mileage and the predicted mileage.
original_values = y_test
predicted_values = lr.predict(X_test)

#R Squared
r2_score(original_values, predicted_values) # Higher the value the better the model

#Mean Squared Error
mean_squared_error(original_values, predicted_values) # Lower the value the better the model

#Root Mean Squared Error
sqrt(mean_squared_error(original_values, predicted_values)) # Lower the value the better the model

#Mean Absolute Error
mean_absolute_error(original_values, predicted_values) # Lower the value the better the model
